# -*- coding: utf-8 -*-
"""home chef.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bCc7zAzaz7Y12LvkbrT3KNcL364cUV4Z
"""

# !pip install langchain langchain_community -q
# !pip install dotenv pypdf -q
# !pip install faiss-cpu tiktoken -q
# !pip install streamlit -q

# !npm install localtunnel
# !streamlit run streamlit_app.py --server.port 80 &>/content/logs.txt &
# !curl https://loca.lt/mytunnelpassword
# !npx localtunnel --port 80

    # def _initialize_embeddings(self):
    #     from langchain_community.embeddings import FakeEmbeddings
    #     return FakeEmbeddings(size=1024)

    # def _initialize_llm(self):
    #     from langchain_community.llms import Ollama
    #     return Ollama(
    #         model="mistral",
    #         temperature=0.7
    #     )
import os
from dotenv import load_dotenv
os.environ['TOGETHER_API_KEY'] = '9002ac6cdc78d3844616861228dc27c0ca0f41f7f6efa028e138c4bc71d3d462'

from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import TokenTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.llms import Together
import os
from dotenv import load_dotenv

load_dotenv()

class PakistaniRecipeAssistant:
    def __init__(self, pdf_path=None, faiss_index_path="faiss_index"):
        self.pdf_path = pdf_path
        self.faiss_index_path = faiss_index_path
        self.embeddings = self._initialize_embeddings()
        self.llm = self._initialize_llm()
        self.vector_store = None
        self.retriever = None
        self.chain = None

    def _initialize_embeddings(self):
        """Initialize and return the embeddings model once"""
        return HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

    def _initialize_llm(self):
        """Initialize and return the LLM once"""
        return Together(
            model="mistralai/Mistral-7B-Instruct-v0.2",
            temperature=0.7,
            max_tokens=1024,
            together_api_key=os.getenv('TOGETHER_API_KEY')
        )

    def initialize_vector_db(self, recreate=False):
        """Initialize or load the FAISS vector store"""
        if not recreate and os.path.exists(self.faiss_index_path):
            self.vector_store = FAISS.load_local(self.faiss_index_path, self.embeddings , allow_dangerous_deserialization=True)
        else:
            if not self.pdf_path:
                raise ValueError("PDF path is required to create new vector store")

            # Load and process PDF
            loader = PyPDFLoader(self.pdf_path)
            pages = loader.load()

            # Split documents
            text_splitter = TokenTextSplitter(chunk_size=1024, chunk_overlap=64)
            splits = text_splitter.split_documents(pages)

            # Create and save vector store
            self.vector_store = FAISS.from_documents(splits, self.embeddings)
            self.vector_store.save_local(self.faiss_index_path)

        self.retriever = self.vector_store.as_retriever(search_kwargs={'k': 5})
        self.chain = self._create_chain()
        return self.vector_store

    def _create_chain(self):
        """Create the RAG chain once after vector DB is initialized"""
        prompt_template = """
        <s>[INST] You are a Home Chef assistant specialized in Pakistani cuisine. Your task is to help users
        create authentic Pakistani recipes using traditional cooking methods. Use only the information from
        the provided context. Be friendly and helpful in your responses.

        Context: {context}

        Question: {question}

        Structure your answer as:
        1. Start with a warm greeting
        2. List ingredients with Pakistani measurements (e.g., pao, ser, chammach)
        3. Provide step-by-step cooking instructions
        4. Include traditional cooking tips
        5. End with serving suggestions

        If you don't know the answer, politely state that you can't help with that particular request.
        [/INST] </s>
        """

        prompt = ChatPromptTemplate.from_template(prompt_template)

        return (
            {"context": self.retriever, "question": RunnablePassthrough()}
            | prompt
            | self.llm
            | StrOutputParser()
        )

    def get_recipe(self, query):
        """Get recipe response for user query"""
        if not self.chain:
            raise RuntimeError("Vector database not initialized. Call initialize_vector_db() first")
        return self.chain.invoke(query)

# # Usage example
# if __name__ == "__main__":
#     # Initialize once
#     assistant = PakistaniRecipeAssistant(
#         pdf_path="/content/pakistani-cooking-a-cookbook-for-beginners.pdf",
#         faiss_index_path="pakistani_recipes_faiss"
#     )

#     # Create or load vector DB (only needed once)
#     assistant.initialize_vector_db(recreate=False)  # Set recreate=True if you want to rebuild the index
    # Now you can query multiple times without reinitializing
    # queries = [
    #     "Give me AH Alu keema  recipe"

    # ]

    # for query in queries:
    #     print(f"\nQuery: {query}")
    #     response = assistant.get_recipe(query)
    #     print(response)
    #     print("\n" + "="*80 + "\n")

assistant = PakistaniRecipeAssistant(
    pdf_path="/content/pakistani-cooking-a-cookbook-for-beginners.pdf",
    faiss_index_path="pakistani_recipes_faiss"
)


# Initialize once
#     assistant = PakistaniRecipeAssistant(
#         pdf_path="/content/pakistani-cooking-a-cookbook-for-beginners.pdf",
#         faiss_index_path="pakistani_recipes_faiss"
#     )

assistant = PakistaniRecipeAssistant(
    faiss_index_path="pakistani_recipes_faiss"
)

# Create or load vector DB (only needed once)
assistant.initialize_vector_db(recreate=False)  # Set recreate=True if you want to rebuild the index

# Now you can query multiple times without reinitializing
queries = [
    "Give me recipes thaat "
]

for query in queries:
    print(f"\nQuery: {query}")
    response = assistant.get_recipe(query)
    print(response)
    print("\n" + "="*80 + "\n")



ingredients = ["chicken", "yogurt"]
print("Suggested recipes:", assistant.get_ingredient_suggestions(ingredients))

# Real-time tips
print("Cooking tips:", assistant.get_real_time_tips("marinating chicken"))

# Grocery list management
assistant.update_grocery_list(["chicken", "spices"])
print("Shared list:", assistant.share_grocery_list())

# Real-time tips
print("Cooking tips:", assistant.get_real_time_tips("marinating chicken"))

# Grocery list management
assistant.update_grocery_list(["chicken", "spices"])
print("Shared list:", assistant.share_grocery_list())





